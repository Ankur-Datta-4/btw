

{{#content "body"}}
  <div class="flex flex-col-reverse sm:flex-row p-4 mt-0 sm:mt-8">
    <div class="p-4 w-full max-w-xs">
      {{> sidebar}}

    </div>
    <div class="w-full sm:mt-0">
      <div class="max-w-3xl p-4">
        <article class="prose tiptap-editor">
          {{{note.html}}}
        </article>
      </div>
    </div>
  </div>
{{/content}}

{{#content "eob-block"}}
    <script>
      window.addEventListener(
        "message",
        function (event) {
          if (event.data.type === "setIframeHeight") {
            if (event.origin !== window.location.origin) {
              // Only accept messages from the same origin
              return;
            }
            var iframe = document.getElementById(event.data.iframeId);
            if (iframe) {
              iframe.style.height = event.data.height + 20 + "px";
            }
          }
        },
        false
      );
    </script>
    <script>
      // get all btw-embed elements on the page
      const embeds = document.querySelectorAll("btw-embed");
      // for each element
      embeds.forEach((embed) => {
        // get the html attribute
        let html = embed.getAttribute("code");
        // if the html attribute is empty, then get the content of the element
        if (!html) {
          html = embed.innerHTML;
        }

        html = (html || "").replace(/&quot;/g, '"');
        const div = document.createElement("div");
        const iframe = document.createElement("iframe");
        // create unique id for iframe
        const iframeId = "iframe-" + Math.random().toString(36).substr(2, 16);
        var jsCode = `<scr`+ `ipt>function sendHeightToParent() {
        var height = document.body.scrollHeight;
        var origin = window.location.origin;
        if (origin === "null" || !origin) {
          origin = "*";
        }
        window.parent.postMessage({
            type: 'setIframeHeight',
            iframeId: '${iframeId}',
            height: height
        }, origin);
    }

    window.addEventListener('load', sendHeightToParent, false);
    window.addEventListener('resize', sendHeightToParent, false);

    // there is a delay sometimes. 
    // let's send height again after 1 second for 6 times at 2 second intervals
    setTimeout(sendHeightToParent, 1000);
    setTimeout(sendHeightToParent, 3000);
    setTimeout(sendHeightToParent, 5000);
    setTimeout(sendHeightToParent, 7000);
    setTimeout(sendHeightToParent, 9000);
    setTimeout(sendHeightToParent, 11000);
    </scr` + `ipt>`;
            // if html contains body tag, then add jscode to body tag of html. else append to html directly
            if (html.includes("<body>")) {
                html = html.replace("<body>", `<body>${jsCode}`);
            } else {
                html = html + jsCode;
            }

            // insert html into iframe
            iframe.srcdoc = html;
            iframe.frameborder = "0";
            iframe.allowfullscreen = "";
            iframe.scrolling = "no";
            iframe.className = "w-full ";
            iframe.id = iframeId;

            div.appendChild(iframe);
            div.className = "w-full";

            // remove all children of embed and set div as child
            while (embed.firstChild) {
                embed.removeChild(embed.firstChild);
            }
            embed.appendChild(div);
        });

        const published_at = {{{published_at}}};

        function readablePostDate(date) {
          const now = new Date();
          const diff = now.getTime() - date.getTime();

          // milliseconds in each unit of time
          const msPerMinute = 60 * 1000;
          const msPerHour = msPerMinute * 60;
          const msPerDay = msPerHour * 24;
          const msPerMonth = msPerDay * 30;
          const msPerYear = msPerDay * 365;

          // time since post was created, in each unit of time
          const minutesAgo = Math.round(diff / msPerMinute);
          const hoursAgo = Math.round(diff / msPerHour);
          const daysAgo = Math.round(diff / msPerDay);
          const monthsAgo = Math.round(diff / msPerMonth);
          const yearsAgo = Math.round(diff / msPerYear);

          if (yearsAgo > 1) {
            return `${yearsAgo} years ago`;
          } else if (monthsAgo > 1) {
            return `${monthsAgo} months ago`;
          } else if (daysAgo > 1) {
            return `${daysAgo} days ago`;
          } else if (hoursAgo > 1) {
            return `${hoursAgo} hours ago`;
          } else {
            return `${minutesAgo} minutes ago`;
          }
        }

        if (published_at) {
            const published_at_date = new Date(published_at);
            // get the elements with id readable-post-date and id post-date-dd-mm-yyyy
            // convert published_at to Mar 1, 2021 format in user's timezone
            const readable_post_date = document.getElementById("readable-post-date");
            const post_date_dd_mm_yyyy = document.getElementById("post-date-dd-mm-yyyy");

            // readable_post_date must be in form of x mins ago, x hours ago, x days ago, x months ago, x years ago depending on what is sensible
            if (readable_post_date) {
              readable_post_date.innerHTML = `Published ${readablePostDate(published_at_date)}`;
            }

            // post_date_dd_mm_yyyy must be in form of Mar 1, 2021 in users timezone
            if (post_date_dd_mm_yyyy) {
              post_date_dd_mm_yyyy.innerHTML = published_at_date.toLocaleDateString("en-US", {
                  year: "numeric",
                  month: "short",
                  day: "numeric",
              });
            }
        }
    </script>
{{/content}}